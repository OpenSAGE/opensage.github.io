{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/dev-diary-4",
    "result": {"data":{"markdownRemark":{"html":"<p><em><a href=\"http://timjones.io/blog/archive/2017/12/24/opensage-dev-diary-4-2017-12-24\">This post</a> was originally published on Tim's blog.</em></p>\n<p><em>OpenSAGE is an open-source re-implementation of the <a href=\"https://en.wikipedia.org/wiki/SAGE_(game_engine)\">SAGE game engine</a>. SAGE was the game engine used in C&#x26;C Generals, C&#x26;C Generals Zero Hour, Battle for Middle-earth and its sequels, C&#x26;C 3 and its sequel, and Red Alert 3 and its sequel. I've been working on OpenSAGE for 6 months, and made some good progress, so I've started this series of blog posts to talk about what is happening in the project each week. You can also star or watch the <a href=\"https://github.com/OpenSAGE/OpenSAGE\">OpenSAGE GitHub repo</a> for a more real-time view of things.</em></p>\n<p>Following on from <a href=\"/blog/archive/2017/12/17/opensage-dev-diary-3-2017-12-17\">last week's post</a>, here is what's been happening this week in <a href=\"https://github.com/OpenSAGE/OpenSAGE\">OpenSAGE</a>.</p>\n<h2>Progress this week</h2>\n<div class=\"video-responsive\">\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZcH15Eeh8Ng\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe>\n</div>\n<p>This week in OpenSAGE:</p>\n<ul>\n<li>\n<p>I've worked on UI rendering, in particular the main menu. The main menu now responds to mouse input, and you can click buttons. C&#x26;C Generals <code>.wnd</code> files use a callback system, and those callbacks are implemented in engine code, so I'm having to guess at their implementations just from observing behaviour in the running game. For example, when you first see the main menu, only the logo is visible, but then after any mouse (or keyboard) input, the border and buttons animate in. As far as I can tell that is done in the <code>MainMenuInput</code> callback. Every UI element (or \"window\" as they're called in <code>.wnd</code> files) has an input callback and a system callback. If it's not specified in the <code>.wnd</code> file, then the engine appears to use default callbacks based on window type (button, textbox, etc.). The input callback receives mouse and keyboard messages, and turns them into \"system\" messages like \"the skirmish button was pressed\", and these system messages are passed to the system callback. One of the system callbacks is <code>PassMessagesToParentSystem</code>, which passes any messages to the system callback of the parent window. In most <code>.wnd</code> files I've looked at so far, eventually at the top level, the <code>.wnd</code> defines a system callback that actually does something. The design seems heavily inspired by win32 window messages, but it's not the same.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/feliwir\">Stephan Vedder</a> submitted another great <a href=\"https://github.com/OpenSAGE/OpenSAGE/pull/12\">pull request</a>, this time adding initial support for the <code>.apt</code> format, used to define UI screens in Battle for Middle-earth (BFME) and later SAGE games.</p>\n</li>\n</ul>\n<p>Just a short update this week. Until next time!</p>","frontmatter":{"slug":"dev-diary-4","title":"OpenSAGE Dev Diary #4","summary":null,"author":"Tim Jones","date":"2017-12-24"}}},"pageContext":{"slug":"dev-diary-4"}},
    "staticQueryHashes": []}